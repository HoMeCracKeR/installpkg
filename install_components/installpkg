#!/bin/bash

# Licence : GNU GPL v3 or later
# (C) Copyright 2007 
# Henri Shustak
# Lucid Information Systems
# http://www.luicdsystems.org

# Installs multiple pagkages, by simply specifing the items on the command line
# All items will be installed to the root directory.

# Version 0.1.6

function check_admin_rights {

    # Check we are running as root
    currentUser=`whoami`
    if [ $currentUser != "root" ] ; then
        echo This script must be run with super user privileges
        exit_status=-127
        exit_now
    fi
	
}


function check_wget {

	# Check if wget is installed on this system
	which wget > /dev/null
    if [ $? != 0 ] ; then
        echo "This tool \"installpkg\" requires wget to be installed and availible via the PATH shell variable,"
		echo "when used with the -u option."
        exit_status=-126
        exit_now
    fi

}


function check_arguments {

    if [ "$num_argumnets" -lt "1" ] ; then
        echo "WARNING ! : No argument provided. No packages installed."
        echo ""
        echo "            To view the installpkg manual, issue the following command :"
        echo "                    man installpkg"
        echo ""
        echo "            installpkg usage : "
        echo "                    sudo installpkg /pathtopackage/package.pkg"
        echo "                    sudo installpkg /pathtopackage/package.mpkg"
        echo "                    sudo installpkg /directory/containing/packages/*"
        echo "                    sudo installpkg -i /pathtopackage/package.dmg"
        echo "                    sudo installpkg -i /directory/containing/dynamicdiskimages/*"
		echo "                    sudo installpkg -ui http://pathtopackage/package.dmg"
		echo "                    sudo installpkg -u http://pathtopackage/package.pkg"
        echo ""
        echo ""
        exit_status=2
        exit_now

    fi
    
    return 0
       
}


function exit_now {

	# Something could be added to clean up the download directory if this is important in the future.
    exit $exit_status

}


function check_package {

    darwin_release_version=`uname -r | awk -F "." '{print $1}'`
    leapoard_relese_version=9
		
    if [ -d "${item2add}" ] ; then
        return 0
    else
        if [ $darwin_release_version -ge $leapoard_relese_version ] ; then
            if [ -d "${item2add}" ] || [ -f "${item2add}" ] ; then
                return 0
            fi
        fi
        echo "WARNING! : Could not locate package : ${item2add}"
        return 1
    fi

}


function check_image {
    
    if [ -f "${item2add}" ] ; then
        return 0
    else
        echo "WARNING! : Could not locate image : ${item2add}"
        return 1
    fi

}


function install_package {

    check_package
    if [ $? == 0 ] ; then
        #Installing Package
        sudo installer -pkg "${item2add}" -target /
		if [ $? != 0 ] ; then
			((num_installer_errors++))
			echo "WARNING! : Errors were encountered during installation of package : ${item2add}"
		else
			((num_installed_packages_or_images++))
		fi
	else
		((num_installer_errors++))
	fi

}


function mount_package {

	number_of_packages_installed_from_image=0
	image_already_mounted="NO"
    check_image
    if [ $? == 0 ] ; then
    
		# check if the image is already mounted
		hdiutil info | grep image-path | awk -F "image-path      : " '{print $NF}' | grep "${item2add}" > /dev/null
		if [ $? == 0 ] ; then
			image_already_mounted="YES"
		fi
		
		# mount image
		image_mount_point=`hdiutil attach -noautoopen "${item2add}" 2>/dev/null | grep "/Volumes/" | awk -F "/Volumes/" '{print $NF}'`
		
		if [ "${image_mount_point}" == "" ] ; then
			echo "ERROR! : Unable to mount item."
			((num_dmg_failed_to_mount++))
			return -1
		else
			# if sucessful recursivly call installpkg to install the package.
			sudo installpkg -q /Volumes/"${image_mount_point}"/*
			if [ $? != 0 ] ; then
				((num_installer_errors++))	
			else
				((number_of_packages_installed_from_image++))
			fi
		
			# unmount the package if it was not already mounted and we managed to mount it earlier.
	        if [ "${image_already_mounted}" == "NO" ] ; then
				sleep 1
				hdiutil detach /Volumes/"${image_mount_point}" > /dev/null
				if [ $? != 0 ] ; then
					sleep 3
					hdiutil detach /Volumes/"${image_mount_point}" -force > /dev/null
					if [ $? != 0 ] ; then
						echo "WARNING! : Unable to unmount item : /Volumes/${image_mount_point}"
					else
						echo "Item unmounted."
					fi
				else
					echo "Item unmounted."
				fi
			fi
		fi
    fi
	
	if [ $num_dmg_failed_to_mount -gt 0 ] ; then
		echo "ERROR : No packages were installed from the image"
		return -1
	else
		return 0 
	fi

}


function check_is_pkg {
     
	# Alterative approach   
	# file_suffix=`echo "${item2add##*.}"`
    # if [ ".${download_suffix}" == ".pkg" ] || [ ".${download_suffix}" == ".mpkg" ] ; then 
		
    extension1=`basename "${item2add}" | tail -c 5`
    extension2=`basename "${item2add}" | tail -c 6`
    if [ "${extension1}" == ".pkg" ] || [ "${extension2}" == ".mpkg" ] ; then 
        # This item is an Installer Package
        return 1
    else
        # This item is not an installer package
		echo "WARNING! : Item is not a package and has not been installed : ${item2add}"
        return 0
    fi
        
}


function check_is_dmg {
        
    extension1=`basename "${item2add}" | tail -c 5`
    if [ "${extension1}" == ".dmg" ] ; then 
        # This item is an dynamic disk image
        return 1
    else
        # This item is not an dynamic disk image
        return 0
    fi
        
}


function setup_tmp_download_directory {

	# Setup a temporary area for downloads
	if [ -d "${download_directory}" ] ; then
		return 0
	else
		mkdir -p "${download_directory}"
		if [ $? == 0 ] ; then
			sync
			return 0
		fi
	fi
	echo "Unable to generate download directory : ${download_directory}"
    exit_status=-124
    exit_now

}


function download_from_url_to_temporary_directory {

	cd "${download_directory}"
	if [ $? != 0 ] ; then 
		echo "ERROR! : Unable to change directory to the download direcotry."
		echo "         No attempt will be made to install any further packages which have yet to be installed."
	    exit_status=-123
	    exit_now
	fi
	followed_redirects_actual_download_url=`wget --spider "${item2add}" 2>&1 | grep -e "^Location" | awk '{print $2}' | tail -n 1`
	if [ "${followed_redirects_actual_download_url}" == "" ] ; then followed_redirects_actual_download_url="${item2add}" ; fi
	downloaded_file_name=`basename "${followed_redirects_actual_download_url}"`
	wget ${wget_options}--backups=0 "${item2add}" -O "${downloaded_file_name}"
	if [ $? != 0 ] ; then 
		echo "ERROR! : Unable to download file : ${item2add}"
		echo "         No attempt will be made to install any further packages which have yet to installed."
	    exit_status=-122
	    exit_now
	fi
	item2add="${download_directory}/${downloaded_file_name}"
	sleep 1
}


function check_is_http {

	first_seven_charcters=`echo ${item2add} | cut -c 1-7`
	if [ "${first_seven_charcters}" == "http://" ] || [ "${first_seven_charcters}" == "https:/" ] ; then
		return 0
	fi
	return 1

}


########### LOGIC AND EXECUTION ###########

# General Settings
num_argumnets=$#
exit_status=0
opt_args_passed=0
install_from_image=0
install_from_http_url=0
quite_mode_enabled=0
num_dmg_failed_to_mount=0
download_directory=/tmp/installpkg_downloads
item2add=""
wget_options=""
num_installer_errors=0
num_installed_packages_or_images=0

# parse any arguments
while getopts ":iuq" option
do
    case $option in
        i   ) ((opt_args_passed++));((install_from_image++));;
		u   ) ((opt_args_passed++));((install_from_http_url++));;
        q   ) ((opt_args_passed++));((quite_mode_enabled++));;
        *   ) ;;   # DEFAULT : Do Nothing
    esac
done
shift $(($OPTIND - 1))
num_argumnets=$#
#   Decrements the argument pointer so it points to next argument.
#   $1 now references the first non option item supplied on the command line
#   if one exists.

# Check we are good to go
check_arguments
check_admin_rights
if [ ${quite_mode_enabled} -gt 0 ] ; then
	wget_options="${wget_options}-q "
fi

# Loop though the arguments provided.
for a
do
    
    item2add="$a"
    
	if [ $quite_mode_enabled == 0 ] ; then
    	echo ""
    	echo ""
	fi
	
	if [ $install_from_http_url != 0 ] ; then
		check_wget
		check_is_http
		if [ $? != 0 ] ; then
			echo "ERROR! : Item is not a http/https URL : ${item2add}"
			echo "         Item has not been mounted or installed"
		else
			setup_tmp_download_directory
			download_from_url_to_temporary_directory
		fi
	fi
	if [ $install_from_image != 0 ] ; then
		check_is_dmg
		 if [ $? == 1 ] ; then
			echo "Mounting Item : ${item2add}"
			mount_package
			if [ $? != 0 ] ; then
				((num_installer_errors++))
			else
				((num_installed_packages_or_images++))	
			fi
		 else
			echo "WARNING! : Item is not a dynamic image file : ${item2add}"
			echo "           Item has not been mounted or installed"
		 fi
	else 
	    check_is_pkg
	    if [ $? == 1 ] ; then
			echo "Installing Item : ${item2add}"
			install_package
	    fi
	fi

	# clean up an item if it was downloaded
	if [ $install_from_http_url != 0 ] ; then
		rm -R "${item2add}"
	fi

done


if [ $quite_mode_enabled == 0 ] ; then
	if [ $num_installed_packages_or_images -gt 0 ] ; then 
		echo ""
		echo ""
		echo "----------------------------------------------------------------------------"
		echo "Summary : "
		echo ""
		echo "If any of these packages required reboots, then you should restart your computer."
		echo "To restart the machine type : sudo shutdown -r now"
	else
		echo "----------------------------------------------------------------------------"
		echo "Summary : "
		echo ""
		echo "    ERROR! : No packages (.pkg or .mpkg) or images (.dmg) were installed."
		echo ""	
	fi
	if [ $num_dmg_failed_to_mount -gt 0 ] ; then
		echo ""
		echo "    WARNING : [${num_dmg_failed_to_mount}] items were .dmg files and they were not able to mounted."
		echo "              Any image packages (.pkg or .mpkg) that were located within "
		echo "              these images file (.dmg) files will not have been installed."
		echo ""
	fi
	if [ $num_installer_errors -gt 0 ] ; then
		echo ""
		echo "    WARNING : [${num_installer_errors}] packages or images failed installation."
		echo ""
	fi
fi

# if [ $num_dmg_failed_to_mount -gt 0 ] ; then
#   exit_status=-130
# fi

if [ $num_installer_errors -gt 0 ] ; then
	exit_status=-131
fi

if [ $num_installed_packages_or_images == 0 ] ; then
	exit_status=-130
fi

exit_now

exit 0
